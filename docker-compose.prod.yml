services:
  postgres:
    image: postgres:15-alpine
    container_name: workflow-postgres
    environment:
      POSTGRES_DB: workflow_db
      POSTGRES_USER: workflow_user
      POSTGRES_PASSWORD: workflow_pass
    # NO PORTS EXPOSED - Internal communication only
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - workflow-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: workflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - workflow-network
    restart: unless-stopped

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: workflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=*
      - GF_DATABASE_TYPE=sqlite3
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - workflow-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Elasticsearch for Kibana
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: workflow-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - workflow-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: workflow-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - workflow-network
    restart: unless-stopped

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: workflow-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: filebeat -e -strict.perms=false
    depends_on:
      - elasticsearch
    networks:
      - workflow-network
    restart: unless-stopped

  # Zipkin for distributed tracing
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: workflow-zipkin
    ports:
      - "9411:9411"
    networks:
      - workflow-network
    restart: unless-stopped

  camunda:
    image: camunda/camunda-bpm-platform:7.21.0
    container_name: workflow-camunda
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: jdbc:postgresql://postgres:5432/workflow_db
      DB_USERNAME: workflow_user
      DB_PASSWORD: workflow_pass
      WAIT_FOR: postgres:5432
    # NO PORTS EXPOSED - Access through Nginx only
    depends_on:
      - postgres
    networks:
      - workflow-network
    restart: unless-stopped

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: workflow-auth-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/workflow_db
      SPRING_DATASOURCE_USERNAME: workflow_user
      SPRING_DATASOURCE_PASSWORD: workflow_pass
    # NO PORTS EXPOSED - Access through Nginx only
    depends_on:
      - postgres
      - zipkin
    networks:
      - workflow-network
    restart: unless-stopped

  workflow-service:
    build:
      context: ./backend/workflow-service
      dockerfile: Dockerfile
    container_name: workflow-workflow-service
    environment:
      CAMUNDA_REST_URL: http://nginx/camunda/engine-rest
    # NO PORTS EXPOSED - Access through Nginx only
    depends_on:
      - camunda
      - zipkin
    networks:
      - workflow-network
    restart: unless-stopped

  task-service:
    build:
      context: ./backend/task-service
      dockerfile: Dockerfile
    container_name: workflow-task-service
    environment:
      CAMUNDA_REST_URL: http://nginx/camunda/engine-rest
    # NO PORTS EXPOSED - Access through Nginx only
    depends_on:
      - camunda
      - zipkin
    networks:
      - workflow-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=http://localhost
        - REACT_APP_TASK_SERVICE_URL=http://localhost
        - REACT_APP_WORKFLOW_SERVICE_URL=http://localhost
        - REACT_APP_CAMUNDA_URL=http://localhost/camunda
    container_name: workflow-frontend
    # NO PORTS EXPOSED - Access through Nginx only
    depends_on:
      - auth-service
      - workflow-service
      - task-service
    networks:
      - workflow-network
    restart: unless-stopped

  # ðŸš€ REVERSE PROXY - Single Entry Point
  nginx:
    image: nginx:alpine
    container_name: workflow-nginx
    ports:
      - "80:80"  # Only port exposed to outside world
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    depends_on:
      - frontend
      - auth-service
      - workflow-service
      - task-service
      - camunda
    networks:
      - workflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
  grafana_data:
  elasticsearch_data:

networks:
  workflow-network:
    driver: bridge
